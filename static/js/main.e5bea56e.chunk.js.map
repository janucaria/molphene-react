{"version":3,"sources":["modules/molphene.ts","modules/emscripten-module.ts","modules/ChemDoodleWeb.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["instance","Molphene","afterCanvasResized","width","height","canvas","ctx","clientWidth","clientHeight","_molphene_application_canvas_size_changed","changeRepresentation","rept","_molphene_application_change_representation","renderFrame","_molphene_application_render_frame","ChemDoodle","MoleculeRepresentation","fn","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","navigationList","representationList","closeAll","e","setState","isNavDrawerOpen","isMoreMenuOpened","onAppToolbarDrawerBtnClicked","onAppBarMoreMenuClicked","onDrawerListItemClicked","target","currentTarget","activatedMol","parseInt","dataset","key","currentActivatedMolecule","activatedMolecule","molecule","link","openPDBMolecule","onAppBarMenuListItemClicked","listItem","repret","representation","activedRepresentation","BallAndStickInstanced","title","atoms","bonds","pdbName","urlPdb","toLocaleLowerCase","fetch","then","res","text","jsonMolJson","mol","endsWith","readMOL","pdbInterpreter","io","PDBInterpreter","deduceResidueBonds","read","jsonMol","JSONInterpreter","molTo","pdbData","strLen","lengthBytesUTF8","ptrStr","_malloc","stringToUTF8","_molphene_application_open_pdb_data","JSON","stringify","catch","err","console","error","_molphene_application_setup","Math","abs","navIndex","length","_this2","react","className","onClick","id","aria-label","role","aria-hidden","aria-orientation","map","idx","data-representation","navListItem","data-key","href","ref","React","Boolean","window","location","hostname","match","module","addEventListener","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8IAEWA,6ECyBIC,WDXR,SAASC,IACd,IAciCC,EAAeC,EAd1CC,EAASL,EAASM,IAAID,OAC5BA,EAAOF,MAAQE,EAAOE,YACtBF,EAAOD,OAASC,EAAOG,aAYUL,EAVdE,EAAOF,MAUsBC,EAVfC,EAAOD,OAWjCJ,EAASS,0CAA0CN,EAAOC,GAG5D,SAASM,EAAqBC,GACnC,OAAOX,EAASY,4CAA4CD,GAGvD,SAASE,IACd,OAAOb,EAASc,qCEvBHC,ICDVC,EDCUD,6BCDVC,uLHZgBC,EG8UNC,cA3Sb,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KALRQ,WAI0B,EAAAP,EAH1BQ,oBAG0B,EAAAR,EAF1BS,wBAE0B,EAAAT,EAmI1BU,SAAW,SAACC,GACVX,EAAKY,SAAS,CACZC,iBAAiB,EACjBC,kBAAkB,KAtIId,EA0I1Be,6BAA+B,SAACJ,GAC9BX,EAAKY,SAAS,CACZC,iBAAiB,KA5IKb,EAgJ1BgB,wBAA0B,SAACL,GACzBX,EAAKY,SAAS,CACZE,kBAAkB,KAlJId,EAsJ1BiB,wBAA0B,SAACN,GACzB,IAAMO,EAASP,EAAEQ,cACXC,EAAeC,SAASH,EAAOI,QAAQC,IAAM,IAC7CC,EAA2BxB,EAAKO,MAAMkB,kBAO5C,GALAzB,EAAKY,SAAS,CACZC,iBAAiB,EACjBY,kBAAmBL,IAGjBA,IAAiBI,EAA0B,CAC7C,IAAME,EAAW1B,EAAKQ,eAAeY,GAAcO,KACnD3B,EAAK4B,gBAAgBF,KAlKC1B,EAsK1B6B,4BAA8B,SAAClB,GAC7B,IAAMmB,EAAWnB,EAAEQ,cACbY,EAASV,SAASS,EAASR,QAAQU,eAAiB,IAC1DhC,EAAKY,SAAS,CACZE,kBAAkB,EAClBmB,sBAAuBF,KAxKzB/B,EAAKO,MAAQ,CACXM,iBAAiB,EACjBC,kBAAkB,EAClBmB,sBAAuBrC,EAAuBsC,sBAC9CT,kBAAmB,GAGrBzB,EAAKS,mBAAqB,CACxB,CACE0B,MAAO,oCAET,CACEA,MAAO,yCAET,CACEA,MAAO,wCAET,CACEA,MAAO,8CAIXnC,EAAKQ,eAAiB,CACpB,CACE2B,MAAO,UACPR,KAAM,YACNS,MAAO,IACPC,MAAO,KAET,CACEF,MAAO,UACPR,KAAM,kBACNS,MAAO,GACPC,MAAO,IAET,CACEF,MAAO,WACPR,KAAM,mBACNS,MAAO,GACPC,MAAO,IAET,CACEF,MAAO,cACPR,KAAM,sBACNS,MAAO,GACPC,MAAO,IAET,CACEF,MAAO,MACPR,KAAM,cACNS,MAAO,GACPC,MAAO,IAET,CACEF,MAAO,UACPR,KAAM,kBACNS,MAAO,EACPC,MAAO,GAET,CACEF,MAAO,WACPR,KAAM,mBACNS,MAAO,GACPC,MAAO,IAET,CACEF,MAAO,UACPR,KAAM,kBACNS,MAAO,GACPC,MAAO,IAET,CACEF,MAAO,YACPR,KAAM,YACNS,MAAO,KACPC,MAAO,MAET,CACEF,MAAO,aACPR,KAAM,YACNS,MAAO,KACPC,MAAO,MAET,CACEF,MAAO,MACPR,KAAM,YACNS,MAAO,IACPC,MAAO,KAET,CACEF,MAAO,eACPR,KAAM,YACNS,MAAO,KACPC,MAAO,MAET,CACEF,MAAO,WACPR,KAAM,YACNS,MAAO,KACPC,MAAO,MAET,CACEF,MAAO,QACPR,KAAM,YACNS,MAAO,KACPC,MAAO,MAET,CACEF,MAAO,2BACPR,KAAM,YACNS,MAAO,KACPC,MAAO,MAET,CACEF,MAAO,WACPR,KAAM,YACNS,MAAO,MACPC,MAAO,OAET,CACEF,MAAO,aACPR,KAAM,YACNS,MAAO,MACPC,MAAO,QA9HarC,+EA+KVsC,GACd,IAAIC,EAAS,SAAWD,EAAQE,oBAEhCC,MAAMF,GACHG,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAG,GACJ,IAAIC,EAEJ,GAAIP,EAAOQ,SAAS,QAClBD,EAAMnD,EAAWqD,QAAQH,EAAa,OACjC,CACL,IAAII,EAAiB,IAAItD,EAAWuD,GAAGC,eACvCF,EAAeG,oBAAqB,EACpCN,EAAMG,EAAeI,KAAKR,EAAa,GAGzC,IAAIS,GAAU,IAAI3D,EAAWuD,GAAGK,iBAAkBC,MAAMV,IHhNzD,SAAqBW,GAC1B,IAAIC,EAAS9E,EAAS+E,gBAAgBF,GAClCG,EAAShF,EAASiF,QAAQH,EAAO,GACrC9E,EAASkF,aAAaL,EAASG,EAAQF,EAAO,GACvC9E,EAASmF,oCAAoCH,GG8M9C/E,CADiBmF,KAAKC,UAAUX,IAEhCzE,MAEDqF,MAAM,SAAAC,GACLtF,IACAuF,QAAQC,MAAMF,iDHlObvF,EAAS0F,8BGwOdzF,IACAA,EAA8BsB,KAAKI,MAAM0B,uBAEzC,IAAMb,EAAemD,KAAKC,IAAIrE,KAAKI,MAAMkB,mBACnCgD,EAAWtE,KAAKK,eAAekE,OAAStD,EAAeA,EAAe,EAEtEM,EAAWvB,KAAKK,eAAeiE,GAAU9C,KAC/CxB,KAAKyB,gBAAgBF,gDAIrB7C,EAA8BsB,KAAKI,MAAM0B,uBACzCpD,qCAGc,IAAA8F,EAAAxE,KACd,OACEyE,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,wBAAQC,UAAU,0CAChBD,EAAA,qBAAKC,UAAU,wBACbD,EAAA,yBAASC,UAAU,kEACjBD,EAAA,wBACEE,QAAS3E,KAAKY,6BACd8D,UAAU,mDAFZ,QAKAD,EAAA,sBAAMC,UAAU,0BAAhB,aAEFD,EAAA,yBAASC,UAAU,gEACjBD,EAAA,qBAAKG,GAAG,YAAYF,UAAU,4BAC5BD,EAAA,wBACEG,GAAG,cACHD,QAAS3E,KAAKa,wBACd6D,UAAU,8CACVG,aAAW,aAJb,aAOAJ,EAAA,qBACEC,UAAW,6BAA+B1E,KAAKI,MAAMO,iBAAmB,0BAA4B,KAEpG8D,EAAA,oBAAIC,UAAU,WAAWI,KAAK,OAAOC,cAAY,OAAOC,mBAAiB,YACtEhF,KAAKM,mBAAmB2E,IAAI,SAACrD,EAAQsD,GACpC,OACET,EAAA,oBACErD,IAAK8D,EACLC,sBAAqBD,EACrBR,UAAW,iBAAmBF,EAAKpE,MAAM0B,uBAAyBoD,EAAM,4BAA8B,IACtGJ,KAAK,WACLH,QAASH,EAAK9C,6BAEd+C,EAAA,sBAAMC,UAAU,uBAAuB9C,EAAOI,gBAUhEyC,EAAA,uBAAOC,UAAW,gCAAkC1E,KAAKI,MAAMM,gBAAkB,oBAAsB,KACrG+D,EAAA,qBAAKC,UAAU,uBACbD,EAAA,qBAAKC,UAAU,+BACZ1E,KAAKK,eAAe4E,IAAI,SAACG,EAAaF,GACrC,OACET,EAAA,mBAAGrD,IAAK8D,EACNG,WAAUH,EACVR,UAAW,iBAAmBF,EAAKpE,MAAMkB,mBAAqB4D,EAAM,4BAA8B,IAClGI,KAAM,IAAMF,EAAY5D,KACxBmD,QAASH,EAAK1D,yBAEd2D,EAAA,sBAAMC,UAAU,uBACdD,EAAA,sBAAMC,UAAU,+BACbU,EAAYpD,OAEfyC,EAAA,sBAAMC,UAAU,iCAAhB,UACUU,EAAYnD,MADtB,YACsCmD,EAAYlD,cAShEuC,EAAA,qBAAKC,UAAU,cAAcC,QAAS3E,KAAKO,UACzCkE,EAAA,wBAAQc,IAAI,SAASX,GAAG,oBAzShBY,aCtBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DJdenG,EKGP,SAACoG,GAEbJ,OAAOK,iBAAiB,SAAU,SAAAvF,GAChC9B,IACAA,MACC,GAEHsH,IAASC,OACPC,EAAAC,EAAAC,cAACC,EAAD,MACAC,SAASC,eAAe,ULXrB9H,IACHA,EAAWC,KAGbD,EAAS8D,KAAK7C,GIgIV,kBAAmB8G,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.e5bea56e.chunk.js","sourcesContent":["import Molphene, { EmscriptenModule } from './emscripten-module';\n\nexport let instance: EmscriptenModule;\n\nexport function init(fn: (mdl: EmscriptenModule) => void) {\n  if (!instance) {\n    instance = Molphene();\n  }\n\n  instance.then(fn);\n}\n\nexport function setup() {\n  return instance._molphene_application_setup();\n}\n\nexport function afterCanvasResized() {\n  const canvas = instance.ctx.canvas as HTMLCanvasElement;\n  canvas.width = canvas.clientWidth;\n  canvas.height = canvas.clientHeight;\n\n  onCanvasSizeChange(canvas.width, canvas.height);\n}\n\nexport function openPDBData(pdbData: string) {\n  let strLen = instance.lengthBytesUTF8(pdbData);\n  let ptrStr = instance._malloc(strLen+1);\n  instance.stringToUTF8(pdbData, ptrStr, strLen+1);\n  return instance._molphene_application_open_pdb_data(ptrStr);\n}\n\nexport function onCanvasSizeChange(width: number, height: number) {\n  return instance._molphene_application_canvas_size_changed(width, height);\n}\n\nexport function changeRepresentation(rept: number) {\n  return instance._molphene_application_change_representation(rept);\n}\n\nexport function renderFrame() {\n  return instance._molphene_application_render_frame();\n}","export interface EmscriptenModule {\n\n  ctx: WebGLRenderingContext;\n\n  then(fn: (mdl: EmscriptenModule) => void): void;\n\n  lengthBytesUTF8(str: string): number;\n\n  stringToUTF8(str: string, outPtr: number[], maxBytesToWrite: number): number;\n\n  _malloc(l: number): number[];\n\n  _free(l: number[]): void;\n\n  _molphene_application_setup(): void;\n\n  _molphene_application_open_pdb_data(ptrStr: number[]): void;\n\n  _molphene_application_canvas_size_changed(width: number, height: number): void;\n\n  _molphene_application_change_representation(rept: number): void;\n\n  _molphene_application_render_frame(): void;\n}\n\ndeclare function Molphene(): EmscriptenModule;\n\nexport default Molphene;\n\n","declare namespace ChemDoodle {\n  namespace io {\n    class PDBInterpreter {\n      deduceResidueBonds: boolean;\n      constructor();\n      read(arg: any, arg2?: number): any;\n    }\n\n    class JSONInterpreter {\n      constructor();\n      molTo(mol: any): any\n    }\n  }\n\n  function readMOL(arg: string, arg2?: number): any;\n};\n\nexport default ChemDoodle;","import * as React from 'react';\nimport * as Molphene from './modules/molphene';\nimport ChemDoodle from './modules/ChemDoodleWeb';\nimport './App.scss';\n\ninterface NavigationListItem {\n  title: string;\n  link: string;\n  atoms: number;\n  bonds: number;\n}\n\ninterface RepresentationListItem {\n  title: string;\n}\n\nenum MoleculeRepresentation {\n  Spacefill,\n  BallAndStick,\n  SpacefillInstanced,\n  BallAndStickInstanced\n}\n\ninterface Props {\n\n}\n\ninterface States {\n  isNavDrawerOpen: boolean;\n  isMoreMenuOpened: boolean;\n  activedRepresentation: MoleculeRepresentation;\n  activatedMolecule: number;\n}\n\nclass App extends React.Component<Props, States> {\n  state: States;\n  navigationList: NavigationListItem[];\n  representationList: RepresentationListItem[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isNavDrawerOpen: false,\n      isMoreMenuOpened: false,\n      activedRepresentation: MoleculeRepresentation.BallAndStickInstanced,\n      activatedMolecule: 0\n    };\n\n    this.representationList = [\n      {\n        title: \"Spacefill (slow batch rendering)\"\n      },\n      {\n        title: \"Ball and Stick (slow batch rendering)\"\n      },\n      {\n        title: \"Spacefill (fast instanced rendering)\"\n      },\n      {\n        title: \"Ball and Stick (fast instances rendering)\"\n      }\n    ];\n\n    this.navigationList = [\n      {\n        title: \"Insulin\",\n        link: \"4ins.pdb1\",\n        atoms: 484,\n        bonds: 411\n      },\n      {\n        title: \"Benzene\",\n        link: \"mol_benzene.mol\",\n        atoms: 12,\n        bonds: 12\n      },\n      {\n        title: \"Caffeine\",\n        link: \"mol_caffeine.mol\",\n        atoms: 24,\n        bonds: 25\n      },\n      {\n        title: \"Cyclohexane\",\n        link: \"mol_cyclohexane.mol\",\n        atoms: 18,\n        bonds: 18\n      },\n      {\n        title: \"DDT\",\n        link: \"mol_ddt.mol\",\n        atoms: 28,\n        bonds: 29\n      },\n      {\n        title: \"Methane\",\n        link: \"mol_methane.mol\",\n        atoms: 5,\n        bonds: 4\n      },\n      {\n        title: \"Morphine\",\n        link: \"mol_morphine.mol\",\n        atoms: 40,\n        bonds: 44\n      },\n      {\n        title: \"Oxylate\",\n        link: \"mol_oxylate.mol\",\n        atoms: 74,\n        bonds: 79\n      },\n      {\n        title: \"Myoglobin\",\n        link: \"1mbo.pdb1\",\n        atoms: 1601,\n        bonds: 1245\n      },\n      {\n        title: \"Hemoglobin\",\n        link: \"4hhb.pdb1\",\n        atoms: 4779,\n        bonds: 4044\n      },\n      {\n        title: \"DNA\",\n        link: \"1bna.pdb1\",\n        atoms: 566,\n        bonds: 544\n      },\n      {\n        title: \"Transfer RNA\",\n        link: \"4tra.pdb1\",\n        atoms: 1779,\n        bonds: 1476\n      },\n      {\n        title: \"Lysozyme\",\n        link: \"2lyz.pdb1\",\n        atoms: 1102,\n        bonds: 1021\n      },\n      {\n        title: \"Porin\",\n        link: \"2por.pdb1\",\n        atoms: 2580,\n        bonds: 2258\n      },\n      {\n        title: \"Green Florousent Protein\",\n        link: \"1gfl.pdb1\",\n        atoms: 3950,\n        bonds: 3738\n      },\n      {\n        title: \"Antobody\",\n        link: \"1igt.pdb1\",\n        atoms: 12956,\n        bonds: 12794\n      },\n      {\n        title: \"Chaperones\",\n        link: \"1aon.pdb1\",\n        atoms: 58870,\n        bonds: 59087\n      }\n    ];\n  }\n\n  closeAll = (e: any) => {\n    this.setState({\n      isNavDrawerOpen: false,\n      isMoreMenuOpened: false\n    });\n  }\n\n  onAppToolbarDrawerBtnClicked = (e: any) => {\n    this.setState({\n      isNavDrawerOpen: true\n    });\n  }\n\n  onAppBarMoreMenuClicked = (e: any) => {\n    this.setState({\n      isMoreMenuOpened: true\n    });\n  }\n\n  onDrawerListItemClicked = (e: any) => {\n    const target = e.currentTarget as HTMLAnchorElement;\n    const activatedMol = parseInt(target.dataset.key!, 10);\n    const currentActivatedMolecule = this.state.activatedMolecule;\n\n    this.setState({\n      isNavDrawerOpen: false,\n      activatedMolecule: activatedMol\n    });\n\n    if (activatedMol !== currentActivatedMolecule) {\n      const molecule = this.navigationList[activatedMol].link;\n      this.openPDBMolecule(molecule);\n    }\n  }\n\n  onAppBarMenuListItemClicked = (e: any) => {\n    const listItem = e.currentTarget as HTMLUListElement;\n    const repret = parseInt(listItem.dataset.representation!, 10);\n    this.setState({\n      isMoreMenuOpened: false,\n      activedRepresentation: repret\n    });\n  }\n\n  openPDBMolecule(pdbName: string) {\n    let urlPdb = \"./pdb/\" + pdbName.toLocaleLowerCase();\n\n    fetch(urlPdb)\n      .then(res => {\n        return res.text()\n      })\n      .then(jsonMolJson => {\n        var mol;\n\n        if (urlPdb.endsWith(\".mol\")) {\n          mol = ChemDoodle.readMOL(jsonMolJson, 1);\n        } else {\n          var pdbInterpreter = new ChemDoodle.io.PDBInterpreter();\n          pdbInterpreter.deduceResidueBonds = true;\n          mol = pdbInterpreter.read(jsonMolJson, 1);\n        }\n\n        var jsonMol = new ChemDoodle.io.JSONInterpreter().molTo(mol);\n        var jsonMolStr = JSON.stringify(jsonMol);\n        Molphene.openPDBData(jsonMolStr);\n        Molphene.renderFrame();\n      })\n      .catch(err => {\n        Molphene.renderFrame();\n        console.error(err);\n      });\n  }\n\n  componentDidMount() {\n    Molphene.setup();\n    Molphene.afterCanvasResized();\n    Molphene.changeRepresentation(this.state.activedRepresentation);\n\n    const activatedMol = Math.abs(this.state.activatedMolecule);\n    const navIndex = this.navigationList.length > activatedMol ? activatedMol : 0;\n\n    const molecule = this.navigationList[navIndex].link;\n    this.openPDBMolecule(molecule);\n  }\n\n  componentDidUpdate() {\n    Molphene.changeRepresentation(this.state.activedRepresentation);\n    Molphene.renderFrame();\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <header className=\"mdc-top-app-bar mdc-top-app-bar--dense\">\n          <div className=\"mdc-top-app-bar__row\">\n            <section className=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\">\n              <button\n                onClick={this.onAppToolbarDrawerBtnClicked}\n                className=\"material-icons mdc-top-app-bar__navigation-icon\">\n                menu\n              </button>\n              <span className=\"mdc-top-app-bar__title\">Molphene</span>\n            </section>\n            <section className=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\">\n              <div id=\"demo-menu\" className=\"mdc-menu-surface--anchor\">\n                <button\n                  id=\"menu-button\"\n                  onClick={this.onAppBarMoreMenuClicked}\n                  className=\"material-icons mdc-top-app-bar__action-item\"\n                  aria-label=\"More menu\">\n                  more_vert\n                </button>\n                <div\n                  className={\"mdc-menu mdc-menu-surface\" + (this.state.isMoreMenuOpened ? \" mdc-menu-surface--open\" : \"\")}\n                >\n                  <ul className=\"mdc-list\" role=\"menu\" aria-hidden=\"true\" aria-orientation=\"vertical\">\n                    {this.representationList.map((repret, idx) => {\n                      return (\n                        <li\n                          key={idx}\n                          data-representation={idx}\n                          className={\"mdc-list-item\" + (this.state.activedRepresentation == idx ? \" mdc-list-item--activated\" : \"\")}\n                          role=\"menuitem\"\n                          onClick={this.onAppBarMenuListItemClicked}\n                        >\n                          <span className=\"mdc-list-item__text\">{repret.title}</span>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </div>\n              </div>\n            </section>\n          </div>\n        </header>\n        <aside className={\"mdc-drawer mdc-drawer--modal\" + (this.state.isNavDrawerOpen ? \" mdc-drawer--open\" : \"\")}>\n          <div className=\"mdc-drawer__content\">\n            <nav className=\"mdc-list mdc-list--two-line\">\n              {this.navigationList.map((navListItem, idx) => {\n                return (\n                  <a key={idx}\n                    data-key={idx}\n                    className={\"mdc-list-item\" + (this.state.activatedMolecule == idx ? \" mdc-list-item--activated\" : \"\")}\n                    href={\"#\" + navListItem.link}\n                    onClick={this.onDrawerListItemClicked}\n                  >\n                    <span className=\"mdc-list-item__text\">\n                      <span className=\"mdc-list-item__primary-text\">\n                        {navListItem.title}\n                      </span>\n                      <span className=\"mdc-list-item__secondary-text\">\n                        atoms: {navListItem.atoms}, bonds: {navListItem.bonds}\n                      </span>\n                    </span>\n                  </a>\n                )\n              })}\n            </nav>\n          </div>\n        </aside>\n        <div className=\"fill-height\" onClick={this.closeAll}>\n          <canvas ref=\"canvas\" id=\"canvas\"></canvas>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Molphene from './modules/molphene'\n\nMolphene.init((module) => {\n\n  window.addEventListener('resize', e => {\n    Molphene.afterCanvasResized();\n    Molphene.renderFrame();\n  }, false);\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root') as HTMLElement\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}