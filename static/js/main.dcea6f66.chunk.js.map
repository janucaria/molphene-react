{"version":3,"sources":["modules/molphene.ts","modules/emscripten-module.ts","modules/ChemDoodle.ts","components/TopAppBar.tsx","App.tsx","components/NavDrawer.tsx","serviceWorker.ts","index.tsx"],"names":["instance","Molphene","afterCanvasResized","width","height","canvas","ctx","clientWidth","clientHeight","_molphene_application_canvas_size_changed","changeRepresentation","rept","_molphene_application_change_representation","renderFrame","_molphene_application_render_frame","ChemDoodle","MoleculeRepresentation","TopAppBar","props","onAppToolbarDrawerBtnClicked","onAppBarMoreMenuClicked","onAppBarMenuListItemClicked","isMoreMenuOpened","representationList","activedRepresentation","react_default","a","createElement","className","onClick","id","aria-label","role","aria-hidden","aria-orientation","map","repret","idx","key","data-representation","title","NavDrawer","isNavDrawerOpen","navigationList","activatedMolecule","onDrawerListItemClicked","navListItem","data-key","href","link","atoms","bonds","fn","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","closeAll","e","setState","oldState","target","currentTarget","activatedMol","parseInt","dataset","currentActivatedMolecule","molecule","openPDBMolecule","listItem","representation","BallAndStickInstanced","pdbName","urlPdb","toLocaleLowerCase","fetch","then","res","text","jsonMolJson","mol","endsWith","readMOL","pdbInterpreter","io","PDBInterpreter","deduceResidueBonds","read","jsonMol","JSONInterpreter","molTo","pdbData","strLen","lengthBytesUTF8","ptrStr","_malloc","stringToUTF8","_molphene_application_open_pdb_data","JSON","stringify","catch","err","console","error","_molphene_application_setup","Math","abs","navIndex","length","react","ref","React","Boolean","window","location","hostname","match","module","addEventListener","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcea6f66.chunk.js","sourcesContent":["import Molphene, { EmscriptenModule } from './emscripten-module';\n\nexport let instance: EmscriptenModule;\n\nexport function init(fn: (mdl: EmscriptenModule) => void) {\n  if (!instance) {\n    instance = Molphene();\n  }\n\n  instance.then(fn);\n}\n\nexport function setup() {\n  return instance._molphene_application_setup();\n}\n\nexport function afterCanvasResized() {\n  const canvas = instance.ctx.canvas as HTMLCanvasElement;\n  canvas.width = canvas.clientWidth;\n  canvas.height = canvas.clientHeight;\n\n  onCanvasSizeChange(canvas.width, canvas.height);\n}\n\nexport function openPDBData(pdbData: string) {\n  let strLen = instance.lengthBytesUTF8(pdbData);\n  let ptrStr = instance._malloc(strLen+1);\n  instance.stringToUTF8(pdbData, ptrStr, strLen+1);\n  return instance._molphene_application_open_pdb_data(ptrStr);\n}\n\nexport function onCanvasSizeChange(width: number, height: number) {\n  return instance._molphene_application_canvas_size_changed(width, height);\n}\n\nexport function changeRepresentation(rept: number) {\n  return instance._molphene_application_change_representation(rept);\n}\n\nexport function renderFrame() {\n  return instance._molphene_application_render_frame();\n}","export interface EmscriptenModule {\n\n  ctx: WebGLRenderingContext;\n\n  then(fn: (mdl: EmscriptenModule) => void): void;\n\n  lengthBytesUTF8(str: string): number;\n\n  stringToUTF8(str: string, outPtr: number[], maxBytesToWrite: number): number;\n\n  _malloc(l: number): number[];\n\n  _free(l: number[]): void;\n\n  _molphene_application_setup(): void;\n\n  _molphene_application_open_pdb_data(ptrStr: number[]): void;\n\n  _molphene_application_canvas_size_changed(width: number, height: number): void;\n\n  _molphene_application_change_representation(rept: number): void;\n\n  _molphene_application_render_frame(): void;\n}\n\ndeclare function Molphene(): EmscriptenModule;\n\nexport default Molphene;\n\n","declare let ChemDoodle : {\n  io : {\n    PDBInterpreter : {\n      new(): {\n        deduceResidueBonds: boolean;\n        read(arg: any, arg2?: number): any;\n      }\n    };\n\n    JSONInterpreter : {\n      new(): {\n        molTo(mol: any): any\n      }\n    }\n  }\n\n  readMOL(arg: string, arg2?: number): any;\n};\n\nexport default ChemDoodle;","import React from \"react\";\n\ninterface NavigationListItem {\n  title: string;\n  link: string;\n  atoms: number;\n  bonds: number;\n}\n\ninterface RepresentationListItem {\n  title: string;\n}\n\nenum MoleculeRepresentation {\n  Spacefill,\n  BallAndStick,\n  SpacefillInstanced,\n  BallAndStickInstanced\n}\n\ninterface Props {\n  onAppToolbarDrawerBtnClicked(e: React.MouseEvent<HTMLButtonElement>): void;\n  onAppBarMoreMenuClicked(e: React.MouseEvent<HTMLButtonElement>): void;\n  onAppBarMenuListItemClicked(e: React.MouseEvent<HTMLLIElement>): void;\n  isMoreMenuOpened: boolean;\n  representationList: RepresentationListItem[];\n  activedRepresentation: MoleculeRepresentation;\n}\n\nexport default function TopAppBar(props: Props): JSX.Element {\n  const {\n    onAppToolbarDrawerBtnClicked,\n    onAppBarMoreMenuClicked,\n    onAppBarMenuListItemClicked,\n    isMoreMenuOpened,\n    representationList,\n    activedRepresentation,\n  } = props;\n  return (\n    <header className=\"mdc-top-app-bar mdc-top-app-bar--dense\">\n      <div className=\"mdc-top-app-bar__row\">\n        <section className=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\">\n          <button\n            onClick={onAppToolbarDrawerBtnClicked}\n            className=\"material-icons mdc-top-app-bar__navigation-icon\">\n            menu\n              </button>\n          <span className=\"mdc-top-app-bar__title\">Molphene</span>\n        </section>\n        <section className=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\">\n          <div id=\"demo-menu\" className=\"mdc-menu-surface--anchor\">\n            <button\n              id=\"menu-button\"\n              onClick={onAppBarMoreMenuClicked}\n              className=\"material-icons mdc-top-app-bar__action-item\"\n              aria-label=\"More menu\">\n              more_vert\n                </button>\n            <div\n              className={\"mdc-menu mdc-menu-surface\" + (isMoreMenuOpened ? \" mdc-menu-surface--open\" : \"\")}\n            >\n              <ul className=\"mdc-list\" role=\"menu\" aria-hidden=\"true\" aria-orientation=\"vertical\">\n                {representationList.map((repret, idx) => {\n                  return (\n                    <li\n                      key={idx}\n                      data-representation={idx}\n                      className={\"mdc-list-item\" + (activedRepresentation === idx ? \" mdc-list-item--activated\" : \"\")}\n                      role=\"menuitem\"\n                      onClick={onAppBarMenuListItemClicked}\n                    >\n                      <span className=\"mdc-list-item__text\">{repret.title}</span>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n        </section>\n      </div>\n    </header>\n  );\n}\n","import * as React from 'react';\nimport * as Molphene from './modules/molphene';\nimport ChemDoodle from './modules/ChemDoodle';\nimport './App.scss';\nimport TopAppBar from \"./components/TopAppBar\";\nimport NavDrawer from \"./components/NavDrawer\";\n\ninterface NavigationListItem {\n  title: string;\n  link: string;\n  atoms: number;\n  bonds: number;\n}\n\ninterface RepresentationListItem {\n  title: string;\n}\n\nenum MoleculeRepresentation {\n  Spacefill,\n  BallAndStick,\n  SpacefillInstanced,\n  BallAndStickInstanced\n}\n\ninterface Props {\n\n}\n\ninterface States {\n  isNavDrawerOpen: boolean;\n  isMoreMenuOpened: boolean;\n  activedRepresentation: MoleculeRepresentation;\n  activatedMolecule: number;\n}\n\nclass App extends React.Component<Props, States> {\n  state: States;\n  navigationList: NavigationListItem[];\n  representationList: RepresentationListItem[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isNavDrawerOpen: false,\n      isMoreMenuOpened: false,\n      activedRepresentation: MoleculeRepresentation.BallAndStickInstanced,\n      activatedMolecule: 0\n    };\n\n    this.representationList = [\n      {\n        title: \"Spacefill (slow batch rendering)\"\n      },\n      {\n        title: \"Ball and Stick (slow batch rendering)\"\n      },\n      {\n        title: \"Spacefill (fast instanced rendering)\"\n      },\n      {\n        title: \"Ball and Stick (fast instances rendering)\"\n      }\n    ];\n\n    this.navigationList = [\n      {\n        title: \"Insulin\",\n        link: \"4ins.pdb1\",\n        atoms: 484,\n        bonds: 411\n      },\n      {\n        title: \"Benzene\",\n        link: \"mol_benzene.mol\",\n        atoms: 12,\n        bonds: 12\n      },\n      {\n        title: \"Caffeine\",\n        link: \"mol_caffeine.mol\",\n        atoms: 24,\n        bonds: 25\n      },\n      {\n        title: \"Cyclohexane\",\n        link: \"mol_cyclohexane.mol\",\n        atoms: 18,\n        bonds: 18\n      },\n      {\n        title: \"DDT\",\n        link: \"mol_ddt.mol\",\n        atoms: 28,\n        bonds: 29\n      },\n      {\n        title: \"Methane\",\n        link: \"mol_methane.mol\",\n        atoms: 5,\n        bonds: 4\n      },\n      {\n        title: \"Morphine\",\n        link: \"mol_morphine.mol\",\n        atoms: 40,\n        bonds: 44\n      },\n      {\n        title: \"Oxylate\",\n        link: \"mol_oxylate.mol\",\n        atoms: 74,\n        bonds: 79\n      },\n      {\n        title: \"Myoglobin\",\n        link: \"1mbo.pdb1\",\n        atoms: 1601,\n        bonds: 1245\n      },\n      {\n        title: \"Hemoglobin\",\n        link: \"4hhb.pdb1\",\n        atoms: 4779,\n        bonds: 4044\n      },\n      {\n        title: \"DNA\",\n        link: \"1bna.pdb1\",\n        atoms: 566,\n        bonds: 544\n      },\n      {\n        title: \"Transfer RNA\",\n        link: \"4tra.pdb1\",\n        atoms: 1779,\n        bonds: 1476\n      },\n      {\n        title: \"Lysozyme\",\n        link: \"2lyz.pdb1\",\n        atoms: 1102,\n        bonds: 1021\n      },\n      {\n        title: \"Porin\",\n        link: \"2por.pdb1\",\n        atoms: 2580,\n        bonds: 2258\n      },\n      {\n        title: \"Green Florousent Protein\",\n        link: \"1gfl.pdb1\",\n        atoms: 3950,\n        bonds: 3738\n      },\n      {\n        title: \"Antobody\",\n        link: \"1igt.pdb1\",\n        atoms: 12956,\n        bonds: 12794\n      },\n      {\n        title: \"Chaperones\",\n        link: \"1aon.pdb1\",\n        atoms: 58870,\n        bonds: 59087\n      }\n    ];\n  }\n\n  closeAll = (e: React.MouseEvent<HTMLDivElement>) => {\n    this.setState({\n      isNavDrawerOpen: false,\n      isMoreMenuOpened: false\n    });\n  }\n\n  onAppToolbarDrawerBtnClicked = (e: React.MouseEvent<HTMLButtonElement>) => {\n    this.setState(oldState => {\n      return {\n        isNavDrawerOpen: !oldState.isNavDrawerOpen\n      };\n    });\n  }\n\n  onAppBarMoreMenuClicked = (e: React.MouseEvent<HTMLButtonElement>) => {\n    this.setState(oldState => {\n      return {\n        isMoreMenuOpened: !oldState.isMoreMenuOpened\n      }\n    });\n  }\n\n  onDrawerListItemClicked = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    const target = e.currentTarget;\n    const activatedMol = parseInt(target.dataset.key!, 10);\n    const currentActivatedMolecule = this.state.activatedMolecule;\n\n    this.setState({\n      isNavDrawerOpen: false,\n      activatedMolecule: activatedMol\n    });\n\n    if (activatedMol !== currentActivatedMolecule) {\n      const molecule = this.navigationList[activatedMol].link;\n      this.openPDBMolecule(molecule);\n    }\n  }\n\n  onAppBarMenuListItemClicked = (e: React.MouseEvent<HTMLLIElement>) => {\n    const listItem = e.currentTarget;\n    const repret = parseInt(listItem.dataset.representation!, 10);\n    this.setState({\n      isMoreMenuOpened: false,\n      activedRepresentation: repret\n    });\n  }\n\n  openPDBMolecule(pdbName: string) {\n    let urlPdb = \"./pdb/\" + pdbName.toLocaleLowerCase();\n\n    fetch(urlPdb)\n      .then(res => {\n        return res.text()\n      })\n      .then(jsonMolJson => {\n        var mol;\n\n        if (urlPdb.endsWith(\".mol\")) {\n          mol = ChemDoodle.readMOL(jsonMolJson, 1);\n        } else {\n          var pdbInterpreter = new ChemDoodle.io.PDBInterpreter();\n          pdbInterpreter.deduceResidueBonds = true;\n          mol = pdbInterpreter.read(jsonMolJson, 1);\n        }\n\n        var jsonMol = new ChemDoodle.io.JSONInterpreter().molTo(mol);\n        var jsonMolStr = JSON.stringify(jsonMol);\n        Molphene.openPDBData(jsonMolStr);\n        Molphene.renderFrame();\n      })\n      .catch(err => {\n        Molphene.renderFrame();\n        console.error(err);\n      });\n  }\n\n  componentDidMount() {\n    Molphene.setup();\n    Molphene.afterCanvasResized();\n    Molphene.changeRepresentation(this.state.activedRepresentation);\n\n    const activatedMol = Math.abs(this.state.activatedMolecule);\n    const navIndex = this.navigationList.length > activatedMol ? activatedMol : 0;\n\n    const molecule = this.navigationList[navIndex].link;\n    this.openPDBMolecule(molecule);\n  }\n\n  componentDidUpdate() {\n    Molphene.changeRepresentation(this.state.activedRepresentation);\n    Molphene.renderFrame();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <TopAppBar\n          onAppToolbarDrawerBtnClicked={this.onAppToolbarDrawerBtnClicked}\n          onAppBarMoreMenuClicked={this.onAppBarMoreMenuClicked}\n          isMoreMenuOpened={this.state.isMoreMenuOpened}\n          representationList={this.representationList}\n          activedRepresentation={this.state.activedRepresentation}\n          onAppBarMenuListItemClicked={this.onAppBarMenuListItemClicked}\n        />\n        <NavDrawer\n          isNavDrawerOpen={this.state.isNavDrawerOpen}\n          navigationList={this.navigationList}\n          activatedMolecule={this.state.activatedMolecule}\n          onDrawerListItemClicked={this.onDrawerListItemClicked}\n        />\n        <div className=\"fill-height\" onClick={this.closeAll}>\n          <canvas ref=\"canvas\" id=\"canvas\"></canvas>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\ninterface NavigationListItem {\n  title: string;\n  link: string;\n  atoms: number;\n  bonds: number;\n}\n\ninterface Props {\n  isNavDrawerOpen: boolean;\n  activatedMolecule: number;\n  navigationList: NavigationListItem[];\n  onDrawerListItemClicked(e: React.MouseEvent<HTMLAnchorElement>): void;\n}\n\nexport default function NavDrawer(props: Props): JSX.Element {\n  const {\n    isNavDrawerOpen,\n    navigationList,\n    activatedMolecule,\n    onDrawerListItemClicked\n  } = props;\n\n  return (<aside className={\"mdc-drawer mdc-drawer--modal\" + (isNavDrawerOpen ? \" mdc-drawer--open\" : \"\")}>\n    <div className=\"mdc-drawer__header\">\n      <h3 className=\"mdc-drawer__title\">Molphene</h3>\n    </div>\n    <hr className=\"mdc-list-divider\" />\n    <div className=\"mdc-drawer__content\">\n      <nav className=\"mdc-list mdc-list--two-line\">\n        {navigationList.map((navListItem, idx) => {\n          return (\n            <a key={idx}\n              data-key={idx}\n              className={\"mdc-list-item\" + (activatedMolecule === idx ? \" mdc-list-item--activated\" : \"\")}\n              href={\"#\" + navListItem.link}\n              onClick={onDrawerListItemClicked}\n            >\n              <span className=\"mdc-list-item__text\">\n                <span className=\"mdc-list-item__primary-text\">\n                  {navListItem.title}\n                </span>\n                <span className=\"mdc-list-item__secondary-text\">\n                  atoms: {navListItem.atoms}, bonds: {navListItem.bonds}\n                </span>\n              </span>\n            </a>\n          )\n        })}\n      </nav>\n    </div>\n  </aside>);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Molphene from './modules/molphene'\n\nMolphene.init((module) => {\n\n  window.addEventListener('resize', e => {\n    Molphene.afterCanvasResized();\n    Molphene.renderFrame();\n  }, false);\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root') as HTMLElement\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}